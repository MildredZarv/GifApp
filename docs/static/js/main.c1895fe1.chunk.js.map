{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","props","setCategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","placeholder","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","image","setTimeout","useFetchGif","GifExpertApp","categories","setCategories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6KAGaA,EAAc,SAAEC,GACzB,IAAQC,EAAgBD,EAAhBC,YACR,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAa,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,YAAc,qBACdC,SAnBa,SAACR,GACtBF,EAAeE,EAAES,OAAOH,a,QCLnBI,EAAc,SAAC,GAAwB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtC,OACI,sBAAKC,UAAY,OAAjB,UACI,qBAAKC,IAAQF,EAAMG,IAAQJ,IAC3B,4BAAKA,Q,uBCJJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE9B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATnB,kBAYZY,GAZY,4CAAH,sDCEPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACtB,ECFuB,SAAEA,GACzB,MAA2BtB,mBAAS,CAChC4B,KAAM,GACNO,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAiBA,OAZAC,qBAAW,WACPjB,EAASC,GACJiB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEf,YAIPC,EDhB2BM,CAAapB,GAAjCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QACtB,OACC,qCACG,+BAAMb,EAAN,OACEa,GAAW,2CACb,qBAAKjB,UAAY,YAAjB,SAEIc,EAAOF,KAAK,SAAAU,GAAK,OACb,cAAC,EAAD,eAEQA,GADIA,EAAMzB,aEVrB4B,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,iBAA9C,mBAAO4C,EAAP,KAAmBC,EAAnB,KAEA,OACI,gCACI,oBAAI3B,UAAY,oCAAhB,0BACA,cAAC,EAAD,CAAanB,YAAgB8C,IAC7B,uBACA,6BAEQD,EAAWd,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,YCLrBwB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.c1895fe1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( props ) => {\r\n    const { setCategory } = props;\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputValue = (e) => {\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 1 ) {\r\n            setCategory( cats => [ inputValue, ...cats]);\r\n            setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                placeholder = 'Add a new category'\r\n                onChange = { handleInputValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = { \r\n    setCategory: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n    return (\r\n        <div className = 'card'>\r\n            <img src = { url } alt = { title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=eU0z87QHqUKn5qwkttC0MDdQOZv2Qd6Q`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n\r\n    return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGif } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGif( category );\r\n    return (\r\n     <> \r\n        <h3>{ category } </h3>\r\n        { loading && <p>Loading...</p>}\r\n        <div className = 'card-grid'>\r\n            {\r\n            images.map( image => (\r\n                <GifGridItem \r\n                    key = { image.id }\r\n                    {...image }/>\r\n                ))   \r\n            }    \r\n        </div>\r\n     </>\r\n\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = ( category ) => {\r\n    const [ state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( image => {\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: image,\r\n                        loading: false\r\n                    });\r\n                },1500);\r\n\r\n            });\r\n    })\r\n    return state; \r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Wonder Woman']);\r\n\r\n    return (\r\n        <div>\r\n            <h2 className = 'animate__animated animate__bounce'>GifExpertApp</h2>\r\n            <AddCategory setCategory = { setCategories }/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category }/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}